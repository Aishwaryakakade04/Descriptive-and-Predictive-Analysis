# -*- coding: utf-8 -*-
"""aish_proj2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1va6yTaPHDhQ27Akh0-utURIuPqDLvesT
"""

!pip install dash

from dash import Dash, html, dcc, callback, Output, Input
import plotly.express as px
import pandas as pd
import dash_table
from dash import dcc

df = pd.read_csv('/content/amazon.csv')
df.head()

app = Dash(__name__)

styles = {
    'pre': {
        'border': 'thin lightgrey solid',
        'overflowX': 'scroll'
    }
}

@app.server.errorhandler(Exception)
def _wrap_errors(error):
    # Your error handling logic here
    pass

def load_data():
    df = pd.read_csv('/content/amazon.csv')
    return df

category = df.groupby('category')['rating'].sum().reset_index()
category

def create_chart(x='rating', y='rating_count', color_encode=False):
    sxatter_fig = px.scatter(df, x=x, y=y, color='category' if color_encode else None, title="{} vs {}".format(x.capitalize(),y.capitalize()))
    sxatter_fig.update_layout(
        xaxis_title=x.capitalize(),
        yaxis_title=y.capitalize(),height=600, width=800)
    return sxatter_fig

def create_bar_chart(x='rating', y='rating_count', color_encode=False):
    bar_fig = px.bar(df, x=x, y=y, color='category' if color_encode else None, title="{} vs {}".format(x.capitalize(),y.capitalize()))
    bar_fig.update_layout(
        xaxis_title=x.capitalize(),
        yaxis_title=y.capitalize(),height=600, width=800)
    return bar_fig

# #widgets
# x_a = dcc.Dropdown(df.category.unique(), 'Canada', id='x_a', style={'width': '50%'},value="rating", clearable=False)
# y_a = dcc.Dropdown(df.category.unique(), 'Canada', id='y_a', style={'width': '50%'},value="rating_count", clearable=False)
# color_encode = dcc.Checklist(['Color Encode'], id='color_encode', value=[])

# !pip install dash
import dash_core_components as dcc

# Assuming df is a pandas DataFrame with a 'category' column and you want 'rating' to be the default selected value
x_a = dcc.Dropdown(
    options=[{'label': category, 'value': category} for category in df.category.unique()],
    value='rating',  # Set the default value here
    id='x_a',
    style={'width': '50%'},
    clearable=False
)

# Similarly for y_a
y_a = dcc.Dropdown(
    options=[{'label': category, 'value': category} for category in df.category.unique()],
    value='rating_count',
    id='y_a',
    style={'width': '50%'},
    clearable=False
)

color_encode = dcc.Checklist(['Color Encode'], id='color_encode', value=[])

multi_select = dcc.Dropdown(
    options=[{'label': category, 'value': category} for category in df.category.unique()],  # Use options for labels
    value=['rating'],  # Provide the default selected values as a list
    id='dropdown-selection',
    multi=True
)



app.layout = [
    html.H1(children='Title of Dash ApP', style={'textAlign':'center'}),
    dash_table.DataTable(df.to_dict('records'), page_size=10),
    dcc.Dropdown(df.category.unique(), 'Canada', id='dropdown-selection'),
    dcc.Graph(id='graph-content'),
    dcc.Slider(df['actual_price'], df['actual_price'], 5,
               value=df['actual_price'].min(),marks={0:'0',250:'250',500:'500',750:'750',1000:'1000'},
               id='slider-input')

]

app.layout = html.Div(children=[
    html.H1("sales"),
    html.Div("exploring the sales data using the datset"),html.Br(),
    html.Div(
children=[x_a,y_a, color_encode,dcc.Graph(id='scatter_plot',figure=create_chart())],style={"display":"inline-block","width":"49%"}),
    html.Div(children=[ multi_select,html.Br(), dcc.Graph(id='bar_chart',figure=create_bar_chart())],style={'display': 'flex'})
    ],style={"padding":"50px"})

@callback(
    Output('graph-content', 'figure'),
    Input('dropdown-selection', 'value')
)
def update_graph(value):
    dff = df[df.actual_price==value]
    return px.line(dff, x='rating', y='category')

def update_figure(selected_year):
    filtered_df = df[df.rating == selected_year]

    fig = px.scatter(filtered_df, x="actual_price", y="category",
                     size="pop", color="continent", hover_name="rating_count",
                     log_x=True, size_max=55)

    fig.update_layout(transition_duration=500)

    return fig

@callback(
    Output('scatter_plot', 'figure'),
    Input('x_a', 'value'),
    Input('y_a', 'value'),
    Input('color_encode', 'value')
)
def update_chart(x='rating', y='rating_count', color_encode=False):
  return px.scatter(df, x=x, y=y, color='category' if color_encode else None, title="{} vs {}".format(x.capitalize(),y.capitalize()))

if __name__ == '__main__':
    app.run_server(debug=True)

